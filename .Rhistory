for(i in 1:10000){
#Convert these quantiles into Xs from the Cactus distribution
mean.vector[i] <- mean(#30 Cactus values)
}
quantiles <- runif(30, 0, 1)
x <- ((quantiles+.1189*)*3*2043.3)^(1/3)
quantiles
x <- ((quantiles+.1189*)*3*2043.3)^(1/3)
x <- NULL
x <- ((quantiles+.1189*)*3*2043.3)^(1/3)
}
x <- ((quantiles+.1189)*3*2043.3)^(1/3)
}
mean.vector[i] <- mean(x)
for(i in 1:10000){
quantiles <- runif(30, 0, 1)
#Convert these quantiles into Xs from the Cactus distribution
x <- ((quantiles+.1189)*3*2043.3)^(1/3)
mean.vector[i] <- mean(x)
}
hist(mean.vector)
n <- 30
n <- 3
mean.vector <- NULL
quantiles <- runif(n, 0, 1)
for(i in 1:10000){
quantiles <- runif(n, 0, 1)
#Convert these quantiles into Xs from the Cactus distribution
x <- ((quantiles+.1189)*3*2043.3)^(1/3)
mean.vector[i] <- mean(x)
}
hist(mean.vector)
hist(mean.vector, breaks = 30)
# how rare is it to find a mean of 100 cactuses less than 14.5?
# P(X-bar_100 < 14.5)
mean(mean.vector < 14.5)
# what is our z-value?
(14.5-15.142)/(sqrt(7.303)/sqrt(100))
# what is our z-value?
z <- (14.5-15.142)/(sqrt(7.303)/sqrt(100))
# P(X-bar_100 < 14.5)
pnorm(z)
## suppose our friend samples 30 cacti and tells us that he found a mean of 17.
xbar <- 17
mu <- 15.142
sigma <- sqrt(7.303)
n <- 30
z <- (xbar - mu)/(sigma/sqrt(n))
z
pnorm(z)
pnorm(z, lower.tail = FALSE)
1 - pnorm(z)
# whats the probability of 25 successes in 100 trials with p=.3
dbinom(25,100,.3)
# Accordign to the zeitgeist survey from the midd campus, 19% of students say that they feel lonely daily.
# suppose that I want to start a focus group to help these students. I want at least 10 students in my
# focus group who feel lonely. Suppose I choose to sample 50 students randomly. I want to know what's
# the probability that P(X>=10) where X = number of students in my sample who feel lonely daily.
# P(X >= 10) = P(X/50 >= .2) = P(p_hat >= .2)
# p_hat ~ Binom(50, 0.19)
1 - pbinom(9,50,.19)
1 - pnorm(10, 50*.19, sqrt(50*.19*.81))
# we need to add a continuity correction
1 - pnorm(9.5 50*.19, sqrt(50*.19*.81))
# we need to add a continuity correction
1 - pnorm(9.5, 50*.19, sqrt(50*.19*.81))
# Decision Trees
library(rpart)
titanic <- read_csv(file.choose())
View(titanic)
# Let's start with one variable?
titanic.subset <- titanic %>%
dplyr::select(Survived, Pclass)
tree.m1 <- rpart(Survived ~ Pclass,
data = titanic.subset)
# Suppose our boundary is Pclass = 1.9
titanic.subset %>%
filter(Pclass > 1.9) %>%
summarize(prop.survive = mean(Survived))
# Look at output
tree.m1
fancyRpartPlot(tree.m1)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(tree.m1)
# Constructs my decision tree
tree.m1 <- rpart(factor(Survived) ~ Pclass,
data = titanic.subset)
# Suppose our boundary is Pclass = 1.9
titanic.subset %>%
filter(Pclass > 1.9) %>%
summarize(prop.survive = mean(Survived))
# Look at output
tree.m1
fancyRpartPlot(tree.m1)
# Let's model pclass as categorical
tree.m22 <- rpart(factor(Survived) ~ factor(Pclass),
data = titanic.subset)
# Let's model pclass as categorical
tree.m2 <- rpart(factor(Survived) ~ factor(Pclass),
data = titanic.subset)
View(tree.m22)
remove(tree.m22)
fancyRpartPlot(tree.m2)
# Let's add Age
tree.m3 <- rpart(factor(Survived) ~ factor(Pclass) + Age,
data = titanic)
fancyRpartPlot(tree.m3)
# Let's say we try to add everything
tree.full <- rpart(factor(Survived) ~ .,
data = titanic)
fancyRpartPlot(tree.full)
# Let's add reasonable variables
tree.reasonable <- rpart(factor(Survived) ~ factor(Pclass) + Age + Sex + SibSp,
data = titanic)
fancyRpartPlot(tree.reasonable)
# How do i make predictions?
predict(tree.reasonable,
data.frame(Pclass = "3",
Age = 10,
SibSp = 8,
Sex = "male"))
### Libraries
```{r,  warning=FALSE, echo = FALSE, message=FALSE, results='hide'}
if (!require("MASS")) install.packages("MASS")
if (!require("tidyverse")) install.packages("tidyverse")
if (!require("lattice")) install.packages("lattice")
if (!require("dplyr")) install.packages("dplyr")
library(MASS)
library(tidyverse)
library(dplyr)
library(lattice)
tourney_updated <- read.csv(file.choose())
View(tourney_updated)
remove(tourney)
tourney <- tourney_updated
tourney <- tourney %>%
filter(Team1Wins < 40)
View(tourney)
tourney.lda <- lda(WinTest ~ .,
data = train.data)
tourney.updated2 <- tourney[,10:43]
results <- read.csv("/Users/dangause/Desktop/senior_classes/spring_2020/stat_learning/homework/hw2/RegularSeasonDetailedResults.csv")
results <- read.csv("/Users/dangause/Desktop/senior_classes/spring_2020/stat_learning/homework/hw2/RegularSeasonDetailedResults.csv")
results <- read.csv("/Users/dangause/Desktop/senior_classes/spring_2020/stat_learning/homework/hw2/NCAATourneySeeds.csv")
results <- read.csv("/Users/dangause/Desktop/senior_classes/spring_2020/stat_learning/homework/hw2/Teams.csv")
results <- read.csv("/Users/dangause/Desktop/senior_classes/spring_2020/stat_learning/homework/hw2/TeamConferences.csv")
results <- read.csv("/Users/dangause/Desktop/senior_classes/spring_2020/stat_learning/homework/hw2/TeamCoaches.csv")
combo <- merge(conf, teams, by="TeamID")
results <- read.csv("/Users/dangause/Desktop/senior_classes/spring_2020/stat_learning/homework/hw2/RegularSeasonDetailedResults.csv")
seeds <- read.csv("/Users/dangause/Desktop/senior_classes/spring_2020/stat_learning/homework/hw2/NCAATourneySeeds.csv")
teams <- read.csv("/Users/dangause/Desktop/senior_classes/spring_2020/stat_learning/homework/hw2/Teams.csv")
conf <- read.csv("/Users/dangause/Desktop/senior_classes/spring_2020/stat_learning/homework/hw2/TeamConferences.csv")
combo <- merge(conf, teams, by="TeamID")
coaches <- read.csv("/Users/dangause/Desktop/senior_classes/spring_2020/stat_learning/homework/hw2/TeamCoaches.csv")
combo <- merge(combo, coaches, by=c("TeamID", "Season"))
combo <- combo %>%
dplyr::select(-c(FirstDayNum, LastDayNum))
colnames(combo) <- c("WTeamID", "Season", "WConfAbbrev", "WTeamName", "WFirstD1Season", "WLastD1Season", "WCoachName")
final <- merge(results,combo, by=c("WTeamID", "Season"))
colnames(combo) <- c("LTeamID", "Season", "LConfAbbrev", "LTeamName", "LFirstD1Season", "LLastD1Season", "LCoachName")
regular <- merge(final,combo, by=c("LTeamID", "Season"))
regular <- na.omit(regular)
tourney<-read.csv("/Users/dangause/Desktop/senior_classes/spring_2020/stat_learning/homework/hw2/NCAATourneyDetailedResults.csv")
remove(tourney)
tourney<-read.csv("/Users/dangause/Desktop/senior_classes/spring_2020/stat_learning/homework/hw2/NCAATourneyDetailedResults.csv")
`r lda.accuracy`
tourney.lda <- lda(WinTest ~ .,
data = train.data)
tourney <- tourney %>%
filter(Team1Wins < 40)
if (!require("MASS")) install.packages("MASS")
if (!require("tidyverse")) install.packages("tidyverse")
if (!require("lattice")) install.packages("lattice")
if (!require("dplyr")) install.packages("dplyr")
library(MASS)
library(tidyverse)
library(dplyr)
library(lattice)
results <- read.csv("/Users/dangause/Desktop/senior_classes/spring_2020/stat_learning/homework/hw2/RegularSeasonDetailedResults.csv")
seeds <- read.csv("/Users/dangause/Desktop/senior_classes/spring_2020/stat_learning/homework/hw2/NCAATourneySeeds.csv")
teams <- read.csv("/Users/dangause/Desktop/senior_classes/spring_2020/stat_learning/homework/hw2/Teams.csv")
conf <- read.csv("/Users/dangause/Desktop/senior_classes/spring_2020/stat_learning/homework/hw2/TeamConferences.csv")
combo <- merge(conf, teams, by="TeamID")
coaches <- read.csv("/Users/dangause/Desktop/senior_classes/spring_2020/stat_learning/homework/hw2/TeamCoaches.csv")
combo <- merge(combo, coaches, by=c("TeamID", "Season"))
combo <- combo %>%
dplyr::select(-c(FirstDayNum, LastDayNum))
colnames(combo) <- c("WTeamID", "Season", "WConfAbbrev", "WTeamName", "WFirstD1Season", "WLastD1Season", "WCoachName")
final <- merge(results,combo, by=c("WTeamID", "Season"))
colnames(combo) <- c("LTeamID", "Season", "LConfAbbrev", "LTeamName", "LFirstD1Season", "LLastD1Season", "LCoachName")
regular <- merge(final,combo, by=c("LTeamID", "Season"))
regular <- na.omit(regular)
mode <- function(x) {
uniqx <- unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
Lregular <- regular %>%
dplyr::select(-starts_with("W"))
Lregular <- Lregular %>%
group_by(LTeamID, Season) %>%
summarise(mean_lscore = mean(LScore), mean_lfgm = mean(LFGM), mean_LFGA = mean(LFGA), mean_LFGM3 = mean(LFGM3),mean_LFGA3 = mean(LFGA3),mean_LFTM = mean(LFTM),mean_LFTA = mean(LFTA),mean_LOR = mean(LOR),mean_LDR = mean(LDR), mean_LAst = mean(LAst),mean_LTO = mean(LTO),mean_LStl = mean(LStl),mean_LBlk = mean(LBlk),mean_LPF = mean(LPF),mean_LConfAbbrev = mode(LConfAbbrev),mean_LTeamName = mode(LConfAbbrev),mean_LFirstD1Season = mean(LFirstD1Season),LLastD1Season = mean(LLastD1Season),mean_LCoachName = mode(LCoachName), LSample_Size=n())
colnames(Lregular)[1] <- "TeamID"
Wregular <- regular %>%
dplyr::select(-starts_with("L"))
Wregular <- Wregular %>%
group_by(WTeamID, Season) %>%
summarise(mean_Wscore = mean(WScore), mean_Wfgm = mean(WFGM), mean_WFGA = mean(WFGA), mean_WFGM3 = mean(WFGM3),mean_WFGA3 = mean(WFGA3),mean_WFTM = mean(WFTM),mean_WFTA = mean(WFTA),mean_WOR = mean(WOR),mean_WDR = mean(WDR), mean_WAst = mean(WAst),mean_WTO = mean(WTO),mean_WStl = mean(WStl),mean_WBlk = mean(WBlk),mean_WPF = mean(WPF),mean_WConfAbbrev = mode(WConfAbbrev), WTeamName = mode(WTeamName),mean_WFirstD1Season = mean(WFirstD1Season),mean_WLastD1Season = mean(WLastD1Season),mean_WCoachName = mode(WCoachName), WSample_Size=n())
colnames(Wregular)[1] <- "TeamID"
regular <- merge(Wregular, Lregular, by = c("TeamID", "Season"))
newregular<- matrix(0, 5474, 13)
newregular <- as.data.frame(newregular)
for (i in 3:16) {
newregular[,i-2] <- ((regular$WSample_Size*regular[,i])+(regular$LSample_Size*regular[,i+20]))/
(regular$WSample_Size+regular$LSample_Size)
colnames(newregular)[i-2] <- colnames(regular)[i]
}
regular <- regular %>%
dplyr::select(TeamID, Season, mean_WConfAbbrev, WTeamName, mean_WFirstD1Season, mean_WLastD1Season, mean_WCoachName, mean_WFirstD1Season, mean_WLastD1Season, WSample_Size, LSample_Size)
regular <- cbind(regular, newregular)
colnames(regular) <- c("TeamID", "Season", "ConfAbbrev", "TeamName", "FirstD1Season", "LastD1Season", "CoachName", "Wins", "Losses", "Mean_Score", "Mean_FGM", "Mean_FGA", "Mean_FGM3", "Mean_FGA3", "Mean_FTM", "Mean_FTA", "Mean_WOR", "Mean_WDR", "Mean_Ast", "Mean_TO", "Mean_Stl", "Mean_Blk", "Mean_PF")
tourney<-read.csv("/Users/dangause/Desktop/senior_classes/spring_2020/stat_learning/homework/hw2/NCAATourneyDetailedResults.csv")
labelvec <- colnames(regular)
colnames(regular) <- paste("W",labelvec, sep="")
colnames(regular)[2] <- "Season"
tourney <- merge(tourney, regular, by=c("WTeamID", "Season"))
colnames(regular) <- paste("L",labelvec, sep="")
colnames(regular)[2] <- "Season"
tourney <- merge(tourney, regular, by=c("LTeamID", "Season"))
tourney <- tourney %>%
dplyr::select(-c(LCoachName,WCoachName, DayNum))
tourney <- tourney[ ,-c(which(colnames(tourney)=="WLoc"):which(colnames(tourney)=="LPF"))]
tourney <- tourney %>%
dplyr::select(-c( #LConfAbbrev,
LTeamName,
LFirstD1Season, LLastD1Season))
colnames(tourney)[c(1,3,4,5)] <- c("TeamID_L", "TeamID_W", "Score_W", "Score_L")
tourney <- tourney[ ,-c((which(colnames(tourney)=="WConfAbbrev")+1):which(colnames(tourney)=="WLastD1Season"))]
df2 <- tourney %>%
dplyr::select(TeamID_W, TeamID_L, Score_W, Score_L)
colnames(df2) <- c("Team1", "Team2", "Team1Score", "Team2Score")
df3 <- df2[round(nrow(df2)*.5,1):nrow(df2),]
df2 <- df2[1:round(nrow(df2)*.5,1),]
colnames(df3) <- c("Team2", "Team1", "Team2Score", "Team1Score")
df4 <- rbind(df2, df3)
tourney <- cbind(df4, tourney)
tourney <- tourney %>%
mutate(WinTest = ifelse(Team1Score > Team2Score,1,0))
L.df <-  tourney %>%
dplyr::select(starts_with("L"), starts_with("W"))
L.df2 <- L.df[round(nrow(L.df)*.5,1):nrow(L.df),]
L.df3 <- L.df[1:round(nrow(L.df)*.5,1),]
for (i in 1:17) {
if (startsWith(colnames(L.df2)[i], "L")) {
colnames(L.df2)[i] <- sub(".", "", colnames(L.df2)[i])
colnames(L.df2)[i] <- paste("W",colnames(L.df2)[i], sep="")
}
}
for (i in 18:34) {
if (startsWith(colnames(L.df2)[i], "W")) {
colnames(L.df2)[i] <- sub(".", "", colnames(L.df2)[i])
colnames(L.df2)[i] <- paste("L",colnames(L.df2)[i], sep="")
}
}
L.df2 <- rbind(L.df3, L.df2)
tourney <- tourney[ ,-c(which(colnames(tourney)=="Score_W"):which(colnames(tourney)=="LMean_PF"))]
tourney <- cbind(tourney, L.df2)
tourney <- tourney[sample(nrow(tourney)),]
for (i in 1:length(colnames(tourney))) {
if (startsWith(colnames(tourney)[i], "W")) {
colnames(tourney)[i] <- sub(".", "", colnames(tourney)[i])
colnames(tourney)[i] <- paste("Team1",colnames(tourney)[i], sep="")
}
if (startsWith(colnames(tourney)[i], "L")) {
colnames(tourney)[i] <- sub(".", "", colnames(tourney)[i])
colnames(tourney)[i] <- paste("Team2",colnames(tourney)[i], sep="")
}
}
colnames(tourney)[length(colnames(tourney))] <- "WinTest"
tourney <- tourney %>%
filter(Team1Wins < 40)
tourney.updated2 <- tourney[,10:43]
tourney.updated2 <- tourney.updated2 %>%
dplyr::select(-c(Team1ConfAbbrev))
train.data <- tourney.updated2[1:(.8*nrow(tourney.updated2)),]
test.data <- tourney.updated2[(.8*nrow(tourney.updated2)):nrow(tourney.updated2),]
tourney.lda <- lda(WinTest ~ .,
data = train.data)
pred.updated <- predict(tourney.lda, test.data)$class
lda.accuracy <- sum(pred.updated == test.data$WinTest) / length(pred.updated)
new.tourney2 <- data.frame(test.data, pred.updated)
new.tourney2 %>%
ggplot(aes(x=Team1Wins, y=Team2Wins)) +
geom_point(aes(color = pred.updated)) + scale_color_discrete(name= "LDA Results", labels = c("Team 1 Win", "Team 2 Win"))  + theme_classic()
tourney.glm <- glm(factor(WinTest) ~ .,
data = train.data,
family = "binomial")
preds.glm <- predict.glm(tourney.glm,
test.data,
type = "response")
start <- .8*length(tourney$Team2ConfAbbrev)
finish <- length(tourney$Team1ConfAbbrev)
preds.frame <- data.frame(test.data, preds.glm, tourney$Team2ConfAbbrev[start:finish], tourney$Team1ConfAbbrev[start:finish])
colnames(preds.frame)[35:36] <- c("Team2Conf", "Team1Conf")
glm.accuracy <- sum(round(preds.glm) == test.data$WinTest) / length(preds.glm)
glm.accuracy
preds.frame %>%
ggplot(aes(x = Team1Wins,
y = preds.glm)) +
geom_point() +
geom_smooth(method = "lm") + theme_classic()
lda.accuracy
preds.frame$preds.glm <- as.factor(round(preds.frame$preds.glm))
preds.frame %>%
ggplot(aes(x=Team1Wins, y=Team2Wins)) + geom_point(aes(color=factor(preds.glm))) + scale_color_discrete(name= "GLM Results", labels = c("Team 1 Win", "Team 2 Win"))  + theme_classic()
new.tourney2 <- data.frame(test.data, pred.updated)
new.tourney2 %>%
ggplot(aes(x=Team1Wins, y=Team2Wins)) +
geom_point(aes(color = pred.updated)) + scale_color_discrete(name= "LDA Prediction", labels = c("Team 1 Win", "Team 2 Win"))  + theme_classic()
new.tourney2 <- data.frame(test.data, pred.updated)
new.tourney2 %>%
ggplot(aes(x=Team1Mean_Score, y=Team2Mean_Score)) +
geom_point(aes(color = pred.updated)) + scale_color_discrete(name= "LDA Prediction", labels = c("Team 1 Mean Score", "Team 2 Mean Score"))  + theme_classic()
preds.frame %>%
group_by(Team1Conf) %>%
summarise(mean_pred = mean(preds.glm)) %>%
ggplot(aes(x=reorder(Team1Conf, mean_pred), y=mean_pred)) + geom_bar(stat="identity", color="black", fill="blue") + coord_flip() + theme_classic()
preds.frame %>%
group_by(Team1Conf) %>%
summarise(mean_pred = mean(preds.glm)) %>%
ggplot(aes(x=reorder(Team1Conf, mean_pred), y=mean_pred)) + geom_bar(stat="identity", color="black", fill="blue") + coord_flip() + theme_classic() + xlab("mean team win prediction") + ylab("conference")
preds.frame$preds.glm <- as.factor(round(preds.frame$preds.glm))
preds.frame$preds.glm <- as.factor(preds.frame$preds.glm)
preds.frame %>%
ggplot(aes(x=Team1Wins, y=Team2Wins)) + geom_point(aes(color=factor(preds.glm))) + scale_color_discrete(name= "GLM Prediction", labels = c("Team 1 Win", "Team 2 Win"))  + theme_classic()
preds.frame$preds.glm <- as.factor(preds.frame$preds.glm)
preds.frame %>%
ggplot(aes(x=Team1Mean_Score, y=Team2Mean_Score)) + geom_point(aes(color=factor(preds.glm))) + scale_color_discrete(name= "GLM Prediction", labels = c("Team 1 Win", "Team 2 Win"))  + theme_classic()
preds.frame$preds.glm <- as.factor(round(preds.frame$preds.glm))
preds.frame$preds.glm <- as.factor(round(preds.frame$preds.glm))
preds.frame$preds.glm <- as.factor(round(preds.frame$preds.glm))
if (!require("MASS")) install.packages("MASS")
if (!require("tidyverse")) install.packages("tidyverse")
if (!require("lattice")) install.packages("lattice")
if (!require("dplyr")) install.packages("dplyr")
library(MASS)
library(tidyverse)
library(dplyr)
library(lattice)
results <- read.csv("/Users/dangause/Desktop/senior_classes/spring_2020/stat_learning/homework/hw2/RegularSeasonDetailedResults.csv")
seeds <- read.csv("/Users/dangause/Desktop/senior_classes/spring_2020/stat_learning/homework/hw2/NCAATourneySeeds.csv")
teams <- read.csv("/Users/dangause/Desktop/senior_classes/spring_2020/stat_learning/homework/hw2/Teams.csv")
conf <- read.csv("/Users/dangause/Desktop/senior_classes/spring_2020/stat_learning/homework/hw2/TeamConferences.csv")
combo <- merge(conf, teams, by="TeamID")
coaches <- read.csv("/Users/dangause/Desktop/senior_classes/spring_2020/stat_learning/homework/hw2/TeamCoaches.csv")
combo <- merge(combo, coaches, by=c("TeamID", "Season"))
combo <- combo %>%
dplyr::select(-c(FirstDayNum, LastDayNum))
colnames(combo) <- c("WTeamID", "Season", "WConfAbbrev", "WTeamName", "WFirstD1Season", "WLastD1Season", "WCoachName")
final <- merge(results,combo, by=c("WTeamID", "Season"))
colnames(combo) <- c("LTeamID", "Season", "LConfAbbrev", "LTeamName", "LFirstD1Season", "LLastD1Season", "LCoachName")
regular <- merge(final,combo, by=c("LTeamID", "Season"))
regular <- na.omit(regular)
mode <- function(x) {
uniqx <- unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
Lregular <- regular %>%
dplyr::select(-starts_with("W"))
Lregular <- Lregular %>%
group_by(LTeamID, Season) %>%
summarise(mean_lscore = mean(LScore), mean_lfgm = mean(LFGM), mean_LFGA = mean(LFGA), mean_LFGM3 = mean(LFGM3),mean_LFGA3 = mean(LFGA3),mean_LFTM = mean(LFTM),mean_LFTA = mean(LFTA),mean_LOR = mean(LOR),mean_LDR = mean(LDR), mean_LAst = mean(LAst),mean_LTO = mean(LTO),mean_LStl = mean(LStl),mean_LBlk = mean(LBlk),mean_LPF = mean(LPF),mean_LConfAbbrev = mode(LConfAbbrev),mean_LTeamName = mode(LConfAbbrev),mean_LFirstD1Season = mean(LFirstD1Season),LLastD1Season = mean(LLastD1Season),mean_LCoachName = mode(LCoachName), LSample_Size=n())
colnames(Lregular)[1] <- "TeamID"
Wregular <- regular %>%
dplyr::select(-starts_with("L"))
Wregular <- Wregular %>%
group_by(WTeamID, Season) %>%
summarise(mean_Wscore = mean(WScore), mean_Wfgm = mean(WFGM), mean_WFGA = mean(WFGA), mean_WFGM3 = mean(WFGM3),mean_WFGA3 = mean(WFGA3),mean_WFTM = mean(WFTM),mean_WFTA = mean(WFTA),mean_WOR = mean(WOR),mean_WDR = mean(WDR), mean_WAst = mean(WAst),mean_WTO = mean(WTO),mean_WStl = mean(WStl),mean_WBlk = mean(WBlk),mean_WPF = mean(WPF),mean_WConfAbbrev = mode(WConfAbbrev), WTeamName = mode(WTeamName),mean_WFirstD1Season = mean(WFirstD1Season),mean_WLastD1Season = mean(WLastD1Season),mean_WCoachName = mode(WCoachName), WSample_Size=n())
colnames(Wregular)[1] <- "TeamID"
regular <- merge(Wregular, Lregular, by = c("TeamID", "Season"))
newregular<- matrix(0, 5474, 13)
newregular <- as.data.frame(newregular)
for (i in 3:16) {
newregular[,i-2] <- ((regular$WSample_Size*regular[,i])+(regular$LSample_Size*regular[,i+20]))/
(regular$WSample_Size+regular$LSample_Size)
colnames(newregular)[i-2] <- colnames(regular)[i]
}
regular <- regular %>%
dplyr::select(TeamID, Season, mean_WConfAbbrev, WTeamName, mean_WFirstD1Season, mean_WLastD1Season, mean_WCoachName, mean_WFirstD1Season, mean_WLastD1Season, WSample_Size, LSample_Size)
regular <- cbind(regular, newregular)
colnames(regular) <- c("TeamID", "Season", "ConfAbbrev", "TeamName", "FirstD1Season", "LastD1Season", "CoachName", "Wins", "Losses", "Mean_Score", "Mean_FGM", "Mean_FGA", "Mean_FGM3", "Mean_FGA3", "Mean_FTM", "Mean_FTA", "Mean_WOR", "Mean_WDR", "Mean_Ast", "Mean_TO", "Mean_Stl", "Mean_Blk", "Mean_PF")
tourney<-read.csv("/Users/dangause/Desktop/senior_classes/spring_2020/stat_learning/homework/hw2/NCAATourneyDetailedResults.csv")
labelvec <- colnames(regular)
colnames(regular) <- paste("W",labelvec, sep="")
colnames(regular)[2] <- "Season"
tourney <- merge(tourney, regular, by=c("WTeamID", "Season"))
colnames(regular) <- paste("L",labelvec, sep="")
colnames(regular)[2] <- "Season"
tourney <- merge(tourney, regular, by=c("LTeamID", "Season"))
tourney <- tourney %>%
dplyr::select(-c(LCoachName,WCoachName, DayNum))
tourney <- tourney[ ,-c(which(colnames(tourney)=="WLoc"):which(colnames(tourney)=="LPF"))]
tourney <- tourney %>%
dplyr::select(-c( #LConfAbbrev,
LTeamName,
LFirstD1Season, LLastD1Season))
colnames(tourney)[c(1,3,4,5)] <- c("TeamID_L", "TeamID_W", "Score_W", "Score_L")
tourney <- tourney[ ,-c((which(colnames(tourney)=="WConfAbbrev")+1):which(colnames(tourney)=="WLastD1Season"))]
df2 <- tourney %>%
dplyr::select(TeamID_W, TeamID_L, Score_W, Score_L)
colnames(df2) <- c("Team1", "Team2", "Team1Score", "Team2Score")
df3 <- df2[round(nrow(df2)*.5,1):nrow(df2),]
df2 <- df2[1:round(nrow(df2)*.5,1),]
colnames(df3) <- c("Team2", "Team1", "Team2Score", "Team1Score")
df4 <- rbind(df2, df3)
tourney <- cbind(df4, tourney)
tourney <- tourney %>%
mutate(WinTest = ifelse(Team1Score > Team2Score,1,0))
L.df <-  tourney %>%
dplyr::select(starts_with("L"), starts_with("W"))
L.df2 <- L.df[round(nrow(L.df)*.5,1):nrow(L.df),]
L.df3 <- L.df[1:round(nrow(L.df)*.5,1),]
for (i in 1:17) {
if (startsWith(colnames(L.df2)[i], "L")) {
colnames(L.df2)[i] <- sub(".", "", colnames(L.df2)[i])
colnames(L.df2)[i] <- paste("W",colnames(L.df2)[i], sep="")
}
}
for (i in 18:34) {
if (startsWith(colnames(L.df2)[i], "W")) {
colnames(L.df2)[i] <- sub(".", "", colnames(L.df2)[i])
colnames(L.df2)[i] <- paste("L",colnames(L.df2)[i], sep="")
}
}
L.df2 <- rbind(L.df3, L.df2)
tourney <- tourney[ ,-c(which(colnames(tourney)=="Score_W"):which(colnames(tourney)=="LMean_PF"))]
tourney <- cbind(tourney, L.df2)
tourney <- tourney[sample(nrow(tourney)),]
for (i in 1:length(colnames(tourney))) {
if (startsWith(colnames(tourney)[i], "W")) {
colnames(tourney)[i] <- sub(".", "", colnames(tourney)[i])
colnames(tourney)[i] <- paste("Team1",colnames(tourney)[i], sep="")
}
if (startsWith(colnames(tourney)[i], "L")) {
colnames(tourney)[i] <- sub(".", "", colnames(tourney)[i])
colnames(tourney)[i] <- paste("Team2",colnames(tourney)[i], sep="")
}
}
colnames(tourney)[length(colnames(tourney))] <- "WinTest"
tourney <- tourney %>%
filter(Team1Wins < 40)
tourney.updated2 <- tourney[,10:43]
tourney.updated2 <- tourney.updated2 %>%
dplyr::select(-c(Team1ConfAbbrev))
train.data <- tourney.updated2[1:(.8*nrow(tourney.updated2)),]
test.data <- tourney.updated2[(.8*nrow(tourney.updated2)):nrow(tourney.updated2),]
tourney.lda <- lda(WinTest ~ .,
data = train.data)
pred.updated <- predict(tourney.lda, test.data)$class
lda.accuracy <- sum(pred.updated == test.data$WinTest) / length(pred.updated)
new.tourney2 <- data.frame(test.data, pred.updated)
new.tourney2 %>%
ggplot(aes(x=Team1Wins, y=Team2Wins)) +
geom_point(aes(color = pred.updated)) + scale_color_discrete(name= "LDA Prediction", labels = c("Team 1 Win", "Team 2 Win"))  + theme_classic()
new.tourney2 <- data.frame(test.data, pred.updated)
new.tourney2 %>%
ggplot(aes(x=Team1Mean_Score, y=Team2Mean_Score)) +
geom_point(aes(color = pred.updated)) + scale_color_discrete(name= "LDA Prediction", labels = c("Team 1 Win", "Team 2 Win"))  + theme_classic()
tourney.glm <- glm(factor(WinTest) ~ .,
data = train.data,
family = "binomial")
preds.glm <- predict.glm(tourney.glm,
test.data,
type = "response")
start <- .8*length(tourney$Team2ConfAbbrev)
finish <- length(tourney$Team1ConfAbbrev)
preds.frame <- data.frame(test.data, preds.glm, tourney$Team2ConfAbbrev[start:finish], tourney$Team1ConfAbbrev[start:finish])
colnames(preds.frame)[35:36] <- c("Team2Conf", "Team1Conf")
glm.accuracy <- sum(round(preds.glm) == test.data$WinTest) / length(preds.glm)
preds.frame %>%
ggplot(aes(x = Team1Wins,
y = preds.glm)) +
geom_point() +
geom_smooth(method = "lm") + theme_classic()
preds.frame %>%
group_by(Team1Conf) %>%
summarise(mean_pred = mean(preds.glm)) %>%
ggplot(aes(x=reorder(Team1Conf, mean_pred), y=mean_pred)) + geom_bar(stat="identity", color="black", fill="blue") + coord_flip() + theme_classic() + ylab("mean team win prediction") + xlab("conference")
preds.frame$preds.glm <- as.factor(round(preds.frame$preds.glm))
preds.frame %>%
ggplot(aes(x=Team1Wins, y=Team2Wins)) + geom_point(aes(color=factor(preds.glm))) + scale_color_discrete(name= "GLM Prediction", labels = c("Team 1 Win", "Team 2 Win"))  + theme_classic()
preds.frame %>%
ggplot(aes(x=Team1Mean_Score, y=Team2Mean_Score)) + geom_point(aes(color=factor(preds.glm))) + scale_color_discrete(name= "GLM Prediction", labels = c("Team 1 Win", "Team 2 Win"))  + theme_classic()
freq <- preds.frame %>%
group_by(Team1Conf) %>%
summarise(n = n()) %>%
filter(n > 6)
preds.frame2 <- merge(freq, preds.frame, by= "Team1Conf")
preds.frame2 %>%
ggplot(aes(x = Team1Wins,
y = preds.glm)) +
geom_point(aes(color=Team1Conf)) +
geom_smooth(method = "lm") + facet_wrap(~Team1Conf)
socccer.games <- matrix(c(61, 39, 15, 20, 24, 12, 12, 35, 15),
ncol = 3)
chisq.test(soccer.games)
socccer.games <- matrix(c(61, 39, 15, 20, 24, 12, 12, 35, 15),
ncol = 3)
chisq.test(soccer.games)
socccer.games
chisq.test(soccer.games)
